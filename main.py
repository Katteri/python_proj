import telebot
import sqlite3
import time
from maze_generation import get_map_cell

bot = telebot.TeleBot("secret")


class game_settings:
    columns, rows = 6, 6
    max_time = 300
    start_time = 0
    penalty = 0
    current_score = 0

    def update_columns(columns):
        game_settings.columns = columns

    def update_rows(rows):
        game_settings.rows = rows

    def update_max_time(max_time):
        game_settings.max_time = max_time

    def update_start_time(start_time):
        game_settings.start_time = start_time

    def update_penalty(penalty):
        game_settings.penalty = penalty

    def update_current_score(current_score):
        game_settings.current_score = current_score


# –∏–≥—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard_game = telebot.types.InlineKeyboardMarkup()
keyboard_game.row(
    telebot.types.InlineKeyboardButton("‚Üê", callback_data="left"),
    telebot.types.InlineKeyboardButton("‚Üë", callback_data="up"),
    telebot.types.InlineKeyboardButton("‚Üì", callback_data="down"),
    telebot.types.InlineKeyboardButton("‚Üí", callback_data="right"),
)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboard_menu = telebot.types.ReplyKeyboardMarkup(
    row_width=3, resize_keyboard=True, one_time_keyboard=True
)
keyboard_menu.row(telebot.types.KeyboardButton("üéÆ –∏–≥—Ä–∞—Ç—å"))
keyboard_menu.add(
    telebot.types.KeyboardButton("‚ùì –ø—Ä–∞–≤–∏–ª–∞"),
    telebot.types.KeyboardButton("‚öô –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
    telebot.types.KeyboardButton("üìÉ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"),
)
keyboard_menu.row(telebot.types.KeyboardButton("üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
keyboard_device = telebot.types.ReplyKeyboardMarkup(
    row_width=1, resize_keyboard=True, one_time_keyboard=True
)
keyboard_device.row(
    telebot.types.KeyboardButton("üì± —Ç–µ–ª–µ—Ñ–æ–Ω"),
    telebot.types.KeyboardButton("üñ• –∫–æ–º–ø—å—é—Ç–µ—Ä"),
)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
github_link = "https://github.com/Katteri/python_proj"
keyboard_link = telebot.types.InlineKeyboardMarkup()
keyboard_link.add(telebot.types.InlineKeyboardButton("–∑–¥–µ—Å—å", url=github_link))

maps = {}


def get_map_str(map_cell, player):
    map_str = ""
    for y in range(game_settings.rows * 2 - 1):
        for x in range(game_settings.columns * 2 - 1):
            if map_cell[x + y * (game_settings.columns * 2 - 1)]:
                map_str += "‚¨õ"
            elif (x, y) == player:
                map_str += "üî¥"
            else:
                map_str += "‚¨ú"
        map_str += "\n"

    return map_str


# —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≤–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def initial_table(message):
    connection = sqlite3.connect("users.db")
    cursor = connection.cursor()
    cursor.execute(
        "CREATE TABLE IF NOT EXISTS users (username varchar(50), total_score int)"
    )
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–¥
    info = cursor.execute(
        "SELECT * FROM users WHERE username = ?", [message.chat.username]
    )
    # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
    if info.fetchone() is None:
        cursor.execute(
            f"INSERT INTO users (username, total_score) VALUES (?, ?)",
            [message.chat.username, 0],
        )
        bot.send_message(
            message.chat.id,
            "–í—ã—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=keyboard_menu,
        )
    connection.commit()
    cursor.close()
    connection.close()


# –ø–æ—Å–ª–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
def increment_score(message):
    connection = sqlite3.connect("users.db")
    cursor = connection.cursor()
    cursor.execute(
        f"UPDATE users SET total_score = total_score + ? WHERE username LIKE ?",
        [game_settings.current_score, message.chat.username],
    )
    game_settings.update_current_score(0)
    connection.commit()
    cursor.close()
    connection.close()

    bot.send_message(
        message.chat.id,
        "–î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É",
        reply_markup=keyboard_menu,
    )


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=["start"])
def main(message):
    bot.send_message(
        message.chat.id,
        f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!\n\n‚ñ™ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É ‚Äî <b>"–∏–≥—Ä–∞—Ç—å"</b>\n‚ñ™ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è ‚Äî <b>"–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"</b>\n‚ñ™ —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ‚Äî <b>"–ø—Ä–∞–≤–∏–ª–∞"</b>\n‚ñ™ –ø–µ—Ä–µ–π—Ç–∏ –∫ GitHub ‚Äî <b>"—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"</b>\n‚ñ™ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî <b>"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"</b>',
        parse_mode="HTML",
        reply_markup=keyboard_menu,
    )
    initial_table(message)


# –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
@bot.message_handler(func=lambda message: "–∏–≥—Ä–∞—Ç—å" in message.text.lower())
def play_message(message):
    game_settings.update_start_time(time.time())

    map_cell = get_map_cell(game_settings.columns, game_settings.rows)

    user_data = {"map": map_cell, "x": 0, "y": 0}

    maps[message.chat.id] = user_data

    bot.send_message(
        message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard_game
    )


@bot.message_handler(func=lambda message: "–ø—Ä–∞–≤–∏–ª–∞" in message.text.lower())
def rules(message):
    bot.send_message(
        message.chat.id,
        f"<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç:</b>\n‚ñ™ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –¥–æ–π—Ç–∏ –¥–æ –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫–ª–µ—Ç–∫–∏, <em>–Ω–µ –∑–∞–¥–µ–≤ —Å—Ç–µ–Ω—ã</em>",
        parse_mode="HTML",
        reply_markup=keyboard_menu,
    )


# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
@bot.message_handler(func=lambda message: "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in message.text.lower())
def settings(message):
    bot.send_message(
        message.chat.id, "–ù–∞ –∫–∞–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Ç—ã –∏–≥—Ä–∞–µ—à—å?", reply_markup=keyboard_device
    )
    bot.register_next_step_handler(message, settings)


def settings(message):
    if "—Ç–µ–ª–µ—Ñ–æ–Ω" in message.text.lower():
        game_settings.update_columns(6)
        game_settings.update_rows(6)
        game_settings.update_max_time(300)
    elif "–∫–æ–º–ø—å—é—Ç–µ—Ä" in message.text.lower():
        game_settings.update_columns(9)
        game_settings.update_rows(9)
        game_settings.update_max_time(600)
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=keyboard_menu)


# —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
@bot.message_handler(func=lambda message: "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" in message.text.lower())
def github(message):
    bot.send_message(
        message.chat.id, "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è üîª", reply_markup=keyboard_link
    )
    bot.send_message(
        message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é!", reply_markup=keyboard_menu
    )


# –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(func=lambda message: "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in message.text.lower())
def statistic(message):
    connection = sqlite3.connect("users.db")
    cursor = connection.cursor()
    # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–∞–∫ –∫–∞–∫ –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ç–µ–∂, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    total_score = cursor.execute(
        "SELECT total_score FROM users WHERE username = ?", [message.chat.username]
    ).fetchone()[0]
    if total_score == 0:
        bot.send_message(
            message.chat.id,
            "–ù–∏ –æ–¥–Ω–∞ –∏–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ —Å—ã–≥—Ä–∞–Ω–∞ üò¢",
            reply_markup=keyboard_menu,
        )
    else:
        # –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stat = cursor.execute(
            "SELECT DENSE_RANK() OVER(ORDER BY total_score DESC) AS rank, total_score, username FROM users ORDER BY rank LIMIT 5"
        ).fetchall()
        # —Å—á–∏—Ç–∞–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é –¥–ª—è –æ—á–∫–æ–≤
        max_lengths = [max(len(str(item)) for item in col) for col in stat]

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        s = "<b>–¢–û–ü 5 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
        header = ("–º–µ—Å—Ç–æ", "–æ—á–∫–∏", "–∏–º—è")
        for i, (item, length) in enumerate(zip(header, max_lengths)):
            s += f"{str(item):<{length}} "
        s += "\n"

        for row in stat:
            for i, (item, length) in enumerate(zip(row, max_lengths)):
                s += f"{str(item):<{length}} "
                if i == len(row) - 1:
                    s += "\n"

        # —Å—á–∏—Ç–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–Ω–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_rank = cursor.execute(
            "SELECT rank, total_score FROM (SELECT DENSE_RANK() OVER(ORDER BY total_score DESC) AS rank, username, total_score FROM users) WHERE username = ?",
            [message.chat.username],
        ).fetchone()[0]
        s += f"\n\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: <b>{user_rank}</b>\n–°—É–º–º–∞ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤ –∑–∞ –≤—Å–µ –∏–≥—Ä—ã: <b>{total_score}</b>"
        bot.send_message(
            message.chat.id, s, parse_mode="HTML", reply_markup=keyboard_menu
        )
    cursor.close()
    connection.close()


# —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    user_data = maps[query.message.chat.id]
    new_x, new_y = user_data["x"], user_data["y"]

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if query.data == "left":
        new_x -= 1
    if query.data == "right":
        new_x += 1
    if query.data == "up":
        new_y -= 1
    if query.data == "down":
        new_y += 1

    # –ø—Ä–æ–≤–µ—Ä—è–º –≤–æ–∑–º–æ–∂–µ–Ω –ª–∏ —Ç–∞–∫–æ–π —Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–Ω–∏–º–∞–µ–º –æ—á–∫–∏
    if (
        new_x < 0
        or new_x > 2 * game_settings.columns - 2
        or new_y < 0
        or new_y > game_settings.rows * 2 - 2
    ):
        game_settings.update_penalty(game_settings.penalty + 1)
        return None
    if user_data["map"][new_x + new_y * (game_settings.columns * 2 - 1)]:
        game_settings.update_penalty(game_settings.penalty + 1)
        return None

    user_data["x"], user_data["y"] = new_x, new_y

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à (–≤—ã–∏–≥—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∞–º–æ–π –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫–ª–µ—Ç–∫–µ)
    if new_x == game_settings.columns * 2 - 2 and new_y == game_settings.rows * 2 - 2:
        # –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–∞–µ–º 5 –º–∏–Ω—É—Ç, –∏–∑ –Ω–∏—Ö –≤—ã—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏–≥—Ä–∞–ª–∏ –∏ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏, –≤—Å–µ —ç—Ç–æ –¥–µ–ª–∏–º –Ω–∞ 10
        game_settings.update_current_score(
            (
                game_settings.max_time
                - round(time.time() - game_settings.start_time)
                - game_settings.penalty * 10
            )
            // 10
        )
        if game_settings.current_score > 0:
            bot.edit_message_text(
                chat_id=query.message.chat.id,
                message_id=query.message.id,
                text=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏‚ùó\n–í–∞—à —Å—á–µ—Ç –∑–∞ –∏–≥—Ä—É: {game_settings.current_score} ‚ú®",
            )
        else:
            bot.edit_message_text(
                chat_id=query.message.chat.id,
                message_id=query.message.id,
                text=f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å —Å—á–µ—Ç–æ–º {game_settings.current_score} üò≠",
            )
        increment_score(query.message)
        return None

    # –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞
    bot.edit_message_text(
        chat_id=query.message.chat.id,
        message_id=query.message.id,
        text=get_map_str(user_data["map"], (new_x, new_y)),
        reply_markup=keyboard_game,
    )


bot.polling(none_stop=False, interval=0)
