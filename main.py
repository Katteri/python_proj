import telebot
from maze_generation import get_map_cell

bot = telebot.TeleBot('secret')
columns, rows = 6, 6

# –∏–≥—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard_game = telebot.types.InlineKeyboardMarkup()
keyboard_game.row(telebot.types.InlineKeyboardButton('‚Üê', callback_data = 'left'),
				  telebot.types.InlineKeyboardButton('‚Üë', callback_data = 'up'),
				  telebot.types.InlineKeyboardButton('‚Üì', callback_data = 'down'),
				  telebot.types.InlineKeyboardButton('‚Üí', callback_data = 'right'))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboard_menu = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
keyboard_menu.row(telebot.types.KeyboardButton('–∏–≥—Ä–∞—Ç—å'))
keyboard_menu.add(telebot.types.KeyboardButton('–ø—Ä–∞–≤–∏–ª–∞'),
				  telebot.types.KeyboardButton('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
				  telebot.types.KeyboardButton('—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
keyboard_device = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
keyboard_device.row(telebot.types.KeyboardButton('—Ç–µ–ª–µ—Ñ–æ–Ω'),
					telebot.types.KeyboardButton('–∫–æ–º–ø—å—é—Ç–µ—Ä'))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
github_link = 'https://github.com/Katteri/python_proj'
keyboard_link = telebot.types.InlineKeyboardMarkup()
keyboard_link.add(telebot.types.InlineKeyboardButton('–∑–¥–µ—Å—å', url = github_link))

maps = {}

def get_map_str(map_cell, player):
	map_str = ""
	for y in range(rows * 2 - 1):
		for x in range(columns * 2 - 1):
			if map_cell[x + y * (columns * 2 - 1)]:
				map_str += "‚¨õ"
			elif (x, y) == player:
				map_str += "üî¥"
			else:
				map_str += "‚¨ú"
		map_str += "\n"

	return map_str

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def main(message):
	bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!\n\n- –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É ‚Äî <b>"–∏–≥—Ä–∞—Ç—å"</b>\n- –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è ‚Äî <b>"–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"</b>\n- —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ‚Äî <b>"–ø—Ä–∞–≤–∏–ª–∞"</b>\n- –ø–µ—Ä–µ–π—Ç–∏ –∫ GitHub ‚Äî <b>"—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"</b>',
				  parse_mode = 'HTML',
				  reply_markup = keyboard_menu)

# –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
@bot.message_handler(func=lambda message: message.text.lower() == '–∏–≥—Ä–∞—Ç—å')
def play_message(message):
	map_cell = get_map_cell(columns, rows)

	user_data = {
			'map': map_cell,
			'x': 0,
			'y': 0
		}

	maps[message.chat.id] = user_data

	bot.send_message(message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard_game)

# —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
@bot.message_handler(func=lambda message: message.text.lower() == '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')
def github(message):
	bot.send_message(message.chat.id, '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è', reply_markup = keyboard_link)
	bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é!', reply_markup = keyboard_menu)

@bot.message_handler(func=lambda message: message.text.lower() == '–ø—Ä–∞–≤–∏–ª–∞')
def rules(message):
	bot.send_message(message.chat.id, f'<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç:</b>\n- –¥–æ–π—Ç–∏ –¥–æ –Ω–∏–∂–Ω–µ–π –ø—Ä–∞–≤–æ–π –∫–ª–µ—Ç–∫–∏, <em>–Ω–µ –∑–∞–¥–µ–≤ —Å—Ç–µ–Ω—ã</em>',
				  parse_mode = 'HTML',
				  reply_markup = keyboard_menu)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
@bot.message_handler(func=lambda message: message.text.lower() == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings(message):
	bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Ç—ã –∏–≥—Ä–∞–µ—à—å?', reply_markup = keyboard_device)
	bot.register_next_step_handler(message, settings)

def settings(message):
	global columns, rows
	if message.text.lower() == '—Ç–µ–ª–µ—Ñ–æ–Ω':
		columns, rows = 6, 6
		bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup = keyboard_menu)
	elif message.text.lower() == '–∫–æ–º–ø—å—é—Ç–µ—Ä':
		columns, rows = 9, 9
		bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup = keyboard_menu)

# —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
	# –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	user_data = maps[query.message.chat.id]
	new_x, new_y = user_data['x'], user_data['y']

	# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	if query.data == 'left':
		new_x -= 1
	if query.data == 'right':
		new_x += 1
	if query.data == 'up':
		new_y -= 1
	if query.data == 'down':
		new_y += 1

	# –ø—Ä–æ–≤–µ—Ä—è–º –≤–æ–∑–º–æ–∂–µ–Ω –ª–∏ —Ç–∞–∫–æ–π —Ö–æ–¥
	if new_x < 0 or new_x > 2 * columns - 2 or new_y < 0 or new_y > rows * 2 - 2:
		return None
	if user_data['map'][new_x + new_y * (columns * 2 - 1)]:
		return None

	user_data['x'], user_data['y'] = new_x, new_y

	# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à (–≤—ã–∏–≥—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∞–º–æ–π –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫–ª–µ—Ç–∫–µ)
	if new_x == columns * 2 - 2 and new_y == rows * 2 - 2:
		bot.edit_message_text( chat_id=query.message.chat.id,
							   message_id=query.message.id,
							   text="–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏",
							   reply_markup=keyboard_menu)
		return None

	# –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	bot.edit_message_text( chat_id=query.message.chat.id,
						   message_id=query.message.id,
						   text=get_map_str(user_data['map'], (new_x, new_y)),
						   reply_markup=keyboard_game)

bot.polling(none_stop=False, interval=0)