import telebot
import sqlite3
from maze_generation import get_map_cell

bot = telebot.TeleBot('7089136398:AAGiQnXmU2vNWI2kZ2VtZKM8Zjhwm_5fFwQ')
columns, rows = 6, 6
current_score = 0

# –∏–≥—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard_game = telebot.types.InlineKeyboardMarkup()
keyboard_game.row(telebot.types.InlineKeyboardButton('‚Üê', callback_data = 'left'),
				  telebot.types.InlineKeyboardButton('‚Üë', callback_data = 'up'),
				  telebot.types.InlineKeyboardButton('‚Üì', callback_data = 'down'),
				  telebot.types.InlineKeyboardButton('‚Üí', callback_data = 'right'))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboard_menu = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
keyboard_menu.row(telebot.types.KeyboardButton('üéÆ –∏–≥—Ä–∞—Ç—å'))
keyboard_menu.add(telebot.types.KeyboardButton('‚ùì –ø—Ä–∞–≤–∏–ª–∞'),
				  telebot.types.KeyboardButton('‚öô –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
				  telebot.types.KeyboardButton('üìÉ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'))
keyboard_menu.row(telebot.types.KeyboardButton('üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
keyboard_device = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
keyboard_device.row(telebot.types.KeyboardButton('üì± —Ç–µ–ª–µ—Ñ–æ–Ω'),
					telebot.types.KeyboardButton('üñ• –∫–æ–º–ø—å—é—Ç–µ—Ä'))

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
github_link = 'https://github.com/Katteri/python_proj'
keyboard_link = telebot.types.InlineKeyboardMarkup()
keyboard_link.add(telebot.types.InlineKeyboardButton('–∑–¥–µ—Å—å', url = github_link))

maps = {}

def get_map_str(map_cell, player):
	map_str = ""
	for y in range(rows * 2 - 1):
		for x in range(columns * 2 - 1):
			if map_cell[x + y * (columns * 2 - 1)]:
				map_str += "‚¨õ"
			elif (x, y) == player:
				map_str += "üî¥"
			else:
				map_str += "‚¨ú"
		map_str += "\n"

	return map_str

# —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≤–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def initial_table(message):
	connection = sqlite3.connect('users.sql')
	cursor = connection.cursor()
	cursor.execute('CREATE TABLE IF NOT EXISTS users (user_id int auto_increment primary key, username varchar(50), total_score int)')
	# –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–¥
	info = cursor.execute('SELECT * FROM users WHERE username = ?', [message.chat.username])
	# –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
	if info.fetchone() is None:
		cursor.execute(f'INSERT INTO users (username, total_score) VALUES (?, ?)', [message.chat.username, 0])
		bot.send_message(message.chat.id, '–í—ã—à–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!', reply_markup = keyboard_menu)
	connection.commit()
	cursor.close()
	connection.close()

# –ø–æ—Å–ª–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
def increment_score(message):
	global current_score
	connection = sqlite3.connect('users.sql')
	cursor = connection.cursor()
	cursor.execute(f'UPDATE users SET total_score = total_score + ? WHERE username LIKE ?', [current_score, message.chat.username])
	current_score = 0
	connection.commit()
	cursor.close()
	connection.close()

	bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É', reply_markup = keyboard_menu)

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def main(message):
	bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!\n\n‚ñ™ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É ‚Äî <b>"–∏–≥—Ä–∞—Ç—å"</b>\n‚ñ™ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è ‚Äî <b>"–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"</b>\n‚ñ™ —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ‚Äî <b>"–ø—Ä–∞–≤–∏–ª–∞"</b>\n‚ñ™ –ø–µ—Ä–µ–π—Ç–∏ –∫ GitHub ‚Äî <b>"—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"</b>\n‚ñ™ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî <b>"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"</b>',
				  	parse_mode = 'HTML',
				  	reply_markup = keyboard_menu)
	initial_table(message)

# –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
@bot.message_handler(func=lambda message: '–∏–≥—Ä–∞—Ç—å' in message.text.lower())
def play_message(message):
	map_cell = get_map_cell(columns, rows)

	user_data = {
			'map': map_cell,
			'x': 0,
			'y': 0
		}

	maps[message.chat.id] = user_data

	bot.send_message(message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard_game)

@bot.message_handler(func=lambda message: '–ø—Ä–∞–≤–∏–ª–∞' in message.text.lower())
def rules(message):
	bot.send_message(message.chat.id, f'<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç:</b>\n‚ñ™ –¥–æ–π—Ç–∏ –¥–æ –Ω–∏–∂–Ω–µ–π –ø—Ä–∞–≤–æ–π –∫–ª–µ—Ç–∫–∏, <em>–Ω–µ –∑–∞–¥–µ–≤ —Å—Ç–µ–Ω—ã</em>',
				  	parse_mode = 'HTML',
				  	reply_markup = keyboard_menu)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
@bot.message_handler(func=lambda message: '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' in message.text.lower())
def settings(message):
	bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Ç—ã –∏–≥—Ä–∞–µ—à—å?', reply_markup = keyboard_device)
	bot.register_next_step_handler(message, settings)

def settings(message):
	global columns, rows
	if '—Ç–µ–ª–µ—Ñ–æ–Ω' in message.text.lower():
		columns, rows = 6, 6
		bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup = keyboard_menu)
	elif '–∫–æ–º–ø—å—é—Ç–µ—Ä' in message.text.lower():
		columns, rows = 9, 9
		bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup = keyboard_menu)

# —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
@bot.message_handler(func=lambda message: '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π' in message.text.lower())
def github(message):
	bot.send_message(message.chat.id, '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è üîª', reply_markup = keyboard_link)
	bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é!', reply_markup = keyboard_menu)

# –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(func=lambda message: '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in message.text.lower())
def statistic(message):
	connection = sqlite3.connect('users.sql')
	cursor = connection.cursor()
	info = cursor.execute('SELECT * FROM users')
	if info.fetchall is None:
		bot.send_message(message.chat.id, info, reply_markup = keyboard_menu)
	else:
		bot.send_message(message.chat.id, '–ù–∏ –æ–¥–Ω–∞ –∏–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ —Å—ã–≥—Ä–∞–Ω–∞ üò¢', reply_markup = keyboard_menu)
	cursor.close()
	connection.close()

# —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
	global current_score
	
	# –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	user_data = maps[query.message.chat.id]
	new_x, new_y = user_data['x'], user_data['y']

	# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
	if query.data == 'left':
		new_x -= 1
	if query.data == 'right':
		new_x += 1
	if query.data == 'up':
		new_y -= 1
	if query.data == 'down':
		new_y += 1

	# –ø—Ä–æ–≤–µ—Ä—è–º –≤–æ–∑–º–æ–∂–µ–Ω –ª–∏ —Ç–∞–∫–æ–π —Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–Ω–∏–º–∞–µ–º –æ—á–∫–∏
	if new_x < 0 or new_x > 2 * columns - 2 or new_y < 0 or new_y > rows * 2 - 2:
		current_score -= 1
		return None
	if user_data['map'][new_x + new_y * (columns * 2 - 1)]:
		current_score -= 1
		return None

	user_data['x'], user_data['y'] = new_x, new_y

	# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à (–≤—ã–∏–≥—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∞–º–æ–π –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π –∫–ª–µ—Ç–∫–µ)
	if new_x == columns * 2 - 2 and new_y == rows * 2 - 2:
		bot.edit_message_text( chat_id = query.message.chat.id,
							   message_id = query.message.id,
							   text = f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏‚ùï\n–í–∞—à —Å—á–µ—Ç –∑–∞ –∏–≥—Ä—É —Å–æ—Å—Ç–∞–≤–∏–ª {current_score} –æ—á–∫–æ–≤')
		increment_score(query.message)
		return None

	# –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç
	current_score += 1
	bot.edit_message_text( chat_id = query.message.chat.id,
						   message_id = query.message.id,
						   text = get_map_str(user_data['map'], (new_x, new_y)),
						   reply_markup = keyboard_game)

bot.polling(none_stop=False, interval = 0)